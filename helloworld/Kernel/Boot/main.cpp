void SBI_Putchar_1(char ch)
{
	register unsigned long long a0 asm("a0")=ch;//定义了一个名为a0的寄存器变量，并将其初始化为ch。
	//在RISC-V的调用约定中，a0寄存器用于传递函数的第一个参数或返回函数结果。

	register unsigned long long a7 asm("a7")=1;//定义了另一个名为a7的寄存器变量，并将其初始化为1。
	//在SBI调用中，a7寄存器用于指定要执行的SBI调用的编号。这里1代表的是输出字符的SBI调用编号。

	asm volatile("ecall");//它执行一个ecall（环境调用）指令。
	//在RISC-V中，ecall是一种触发环境调用的机制，它会根据a7中的值（即SBI调用号）和其他参数寄存器的值来执行相应的操作。
	//这里，它将导致执行编号为1的SBI调用，即输出字符。

	//调用编号1，在此上下文中，通常是指代控制台字符输出服务，即SBI控制台输出功能，用于输出一个字符到控制台。

	//当执行ecall指令时，机器模式的软件（比如固件）会检查a7寄存器中的值，以确定要执行哪种服务。
	//对于编号1的调用，机器模式的软件将理解这是一个请求发送字符到控制台的服务，并据此处理a0寄存器中的数据(即要输出的字符)
	//通过这种方式，SBI允许不同模式之间进行通信和服务请求，尤其是在更高权限模式提供的功能集合。
}

extern "C"//一种链接指令，用于指示编译器这个特定的代码块应该按照C语言的链接约定来处理
{
	void SBI_Putchar_2(char ch);

	//在其他C++代码中可以调用这个函数，而函数的实现可以用汇编语言写并遵循C的约定
	//C++代码知道如何找到并执行这个函数，即便其实现是用汇编语言编写的
	//结合利用C++的高级特性和汇编的直接硬件控制能力
};

void Puts(const char *s)
{
	if (s==nullptr)
		return;
	while (*s)
		SBI_Putchar_1(*s++);//换成SBI_Putchar_2,也就是使用汇编程序中的该函数
}

int main()//不需要extern "C" 
{
	Puts("Hello world!");
	while (1);
	return 0;
}
